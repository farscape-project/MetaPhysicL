Version 1.2.2
  * Restrict implicit conversions (fix for Eigen compatibility)
Version 1.2.1
  * New configure options for selecting C++ standard
Version 1.2.0
  * C++17 standard library compatibility
Version 1.1.0
  * Add RawType<vector<DualNumber>> and RawType<vector<vector<DualNumber>>>
  * Add IsRawSame helper
  * Use new TIMPI NotADataType class
  * Use "-f" when using mv to overwrite our own files
Version 1.0.1, 1.0.2
  * Autoconf submodule refactoring
Version 1.0.0
  * MetaPhysicL may now be optionally configured with TIMPI
  * Add StandardType and Packing specializations for parallel communication of
    DualNumber and DynamicSparseNumberArray data
  * DualNumbers can now have derivative initialization/calculation turned off.
    Adds a boolean template argument to DualNumber
Version 0.6.0
  * Product and quotient rule operations produce one less temporary when
    operands are different objects
Version 0.5.2
  * Define CompareTypes between T and std::complex<T>
Version 0.5.1
  * Reduce temporary creation and foster loop fusion for derivative calculations
    with static storage types
  * Fix std::pow(0,b>1) derivatives
Version 0.5.0
  * Create metaphysicl_dbg_var to eliminate compiler warnings
  * Add unsigned long / long long support
  * Add long int type support
  * Fix Perl GetOptions unknown option error for mingw64
  * Fix warning with clang 7.x: Prevent copying when returning by name; use std::move
Version 0.4.0
  * Fix norm derivative for DualNumber
  * Add some assignment overloads for DualNumber
  * Don't default initialize NumberArray data
  * Test calculations of DualNumber<T, NumberArray<N,T>>
  * Add support for many C++11 math functions
Version 0.3.3
  * Begin incrementing library versioning properly
  * More declarations properly added to _decl headers
  * Fixes for numerous compiler warnings
Version 0.3.2
  * Support for std::complex functions for some classes
  * Bugfix in DynamicSparseNumber*::operator[]
  * More unit tests
Version 0.3.1
  * Better C++11/C++14 manual+auto configuration
  * const-compatible DualNumberSurrogate copy constructor/assignment
  * DualNumber construction/assignment from surrogates
  * NotADuckDualNumber derivatives fixes
Version 0.3.0
  * Fixed dualnamedarray.h for newer compilers
  * DualNumber now requires C++11
  * DualNumberSurrogate for wrapping container classes in DualNumber
  * Fix testing for C++11, C++14
  * Starting automatic Travis CI testing of new PRs
  * Fixes for VexCL, Boost configuration
Version 0.2.0
  * Fixed divergence of tensors
  * Refactoring common code from Array-vs-Vector class pairs
  * Removing inappropriate function overloads for Vectors
  * More _decl.h headers for recursive class nesting
  * Implementations of is_nan, if_else, other helpful functions
  * Fixes for Intel compiler compatibility
  * Many other new unit tests, assertions, bugfixes
Version 0.1.0
Version 0.0.0
